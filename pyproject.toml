# [tool.poetry]
# name = "mtl_cluster"
# version = "0.1.0"
# description = ""
# authors = ["Ni-Vi <nickvitsakis@gmail.com>"]

# [tool.poetry.dependencies]
# python = "^3.10"
# pydantic = "^2"
# pandas = "^2.0.3"
# orjson = "^3.9.2"
# pydantic-settings = "^2.0.2"
# transformers = "^4.33.1"
# torch = "^2.0.0, !=2.0.1"
# scikit-learn = "^1.3.0"
# rich = "^13.5.2"
# kmodes = "^0.12.2"
# more-itertools = "^10.1.0"
# lightning = "^2.0.9"
# sentence-transformers = "^2.2.2"


# [tool.poetry.group.lint.dependencies]
# black = "*"

# [tool.poetry.group.test.dependencies]
# pytest = "^7.4.0"


[project]
name = "mtl_cluster"
version = "0.1.0"
description = ""
authors = [
    {name = "Ni-Vi", email = "nickvitsakis@gmail.com"},
]
dependencies = [
    "pydantic>=2",
    "pandas>=2.0.3",
    "orjson>=3.9.2",
    "pydantic-settings>=2.0.2",
    "torch!=2.0.1,>=2.0.0",
    "scikit-learn>=1.3.1",
    "rich>=13.6.0",
    "kmodes>=0.12.2",
    "more-itertools>=10.1.0",
    "sentence-transformers>=2.2.2",
    "pytorch-lightning>=2.0.9",
    "torchmetrics>=1.2.0",
    "seaborn>=0.13.0",
    "wandb>=0.16.0",
    "loguru>=0.7.2",
    "omegaconf>=2.3.0",
    "hydra-core>=1.3.2",
    "scipy>=1.9.3",
    "pyarrow>=14.0.1",
    "plotly>=5.18.0",
    "pomegranate>=1.0.3",
    "polars>=0.20.4",
    "einops>=0.7.0",
]
requires-python = ">=3.11,<4.0"
readme = "README.md"
license = {text = "MIT"}


[project.optional-dependencies]
test2 = [
    "pytest>=7.4.2",
]
[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


[tool.black]
line-length = 99



[tool.ruff]
line-length = 99
ignore-init-module-imports = true
target-version = "py311"
src = ["src"]

# Enable every possible rule
select = ["ALL"]

ignore = [
	# Allow function call as argument default
	"B008",
	# Don't ask for docstring at top of module --- put it in the functions/classes
	"D100",
	# Do not check for docstring within __init__ method
	"D107",
	# Don't ask about line length, Black recommends using bugbear B950 instead
	"E501",
	# Disable because this project uses jaxtyping (https://github.com/google/jaxtyping/blob/main/FAQ.md#flake8-is-throwing-an-error)
	"F722",
	# Allow import to be uppercase, because torch.nn.functional as F
	"N812",
	# Do not enforce annotations for self, cls, or similar
	"ANN1",
	# Do not block using 'Any' type since it happens
	"ANN401",
	# Let Black handle commas
	"COM",
	# Let logging use f-strings
	"G004",
	# Disable 'flake8-errmsg' because we assume users of this project can read tracebacks
	"EM",
	# We don't need to care about creating separate exception classes for every single type of error
	"TRY003",
	# Allow assigning variables before returning them
	"RET504",
	# Don't care about requiring an author name or issue link for a todo
	"TD002",
	"TD003",
	# Disable flagging commented-out code because it's false-positives on shape comments
	"ERA001",
	"S101",
]

unfixable = [
	# Do not remove unused imports
	# "F401",
	# Do not remove unused variables
	"F841",
	# Do not auto-remove commented out code
	"ERA001",
]

[tool.ruff.pylint]
max-args = 20

[tool.ruff.flake8-quotes]
inline-quotes = "double"

[tool.ruff.mccabe]
max-complexity = 18

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
combine-as-imports = true
lines-after-imports = 2
known-first-party = ["mtl_cluster"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions", "pydantic_numpy"]
runtime-evaluated-base-classes = [
	"pydantic.BaseModel",
	"pydantic.generics.GenericModel",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["D", "S101"]


[tool.pdm.build]
package-dir = "src"


[tool.pdm.dev-dependencies]
lint = [
    "black>=23.9.1",
    "ruff>=0.0.291",
]
dev = [
    "pytest>=7.4.2",
]
test = [
    "pytest>=7.4.2",
]
notebooks = [
    "ipykernel>=6.26.0",
    "ipywidgets>=8.1.1",
]

[tool.pdm.options]
list = ["--field","name,groups,version,location","--exclude",":sub"]
